title,comment,vote,views,bookmarks,created,modified,languages
How to convert a Decimal to a Double in C#?,"
                
I want to use a Track-Bar to change a Form's opacity.
This is my code:
decimal trans = trackBar1.Value / 5000;
this.Opacity = trans;

When I build the application, it gives the following error:

Cannot implicitly convert type decimal to double


I have tried using trans and double, but then the Control doesn't work. This code worked fine in a past VB.NET project.
    ",762,6450,58,2008-07-31T21:42:52,2022-04-12 09:48:45Z,c 
How to convert a Decimal to a Double in C#?,"An explicit cast to double like this isn't necessary:

double trans = (double) trackBar1.Value / 5000.0;


Identifying the constant as 5000.0 (or as 5000d) is sufficient:

double trans = trackBar1.Value / 5000.0;
double trans = trackBar1.Value / 5000d;

    ",505,6450,58,2008-07-31T21:42:52,2022-04-12 09:48:45Z,c 
How to convert a Decimal to a Double in C#?,"A more generic answer for the generic question ""Decimal vs Double?"":
Decimal is for monetary calculations to preserve precision. Double is for scientific calculations that do not get affected by small differences. Since Double is a type that is native to the CPU (internal representation is stored in base 2), calculations made with Double perform better than Decimal (which is represented in base 10 internally).
    ",144,6450,58,2008-07-31T21:42:52,2022-04-12 09:48:45Z,c 
How to convert a Decimal to a Double in C#?,"Your code worked fine in VB.NET because it implicitly does any casts, while C# has both implicit and explicit ones.

In C# the conversion from decimal to double is explicit as you lose accuracy. For instance 1.1 can't be accurately expressed as a double, but can as a decimal (see ""Floating point numbers - more inaccurate than you think"" for the reason why).

In VB the conversion was added for you by the compiler:

decimal trans = trackBar1.Value / 5000m;
this.Opacity = (double) trans;


That (double) has to be explicitly stated in C#, but can be implied by VB's more 'forgiving' compiler.
    ",97,6450,58,2008-07-31T21:42:52,2022-04-12 09:48:45Z,c 
How to convert a Decimal to a Double in C#?,"Why are you dividing by 5000? Just set the TrackBar's Minimum and Maximum values between 0 and 100 and then divide the Value by 100 for the Opacity percentage. The minimum 20 example below prevents the form from becoming completely invisible:

private void Form1_Load(object sender, System.EventArgs e)
{
    TrackBar1.Minimum = 20;
    TrackBar1.Maximum = 100;

    TrackBar1.LargeChange = 10;
    TrackBar1.SmallChange = 1;
    TrackBar1.TickFrequency = 5;
}

private void TrackBar1_Scroll(object sender, System.EventArgs e)
{
    this.Opacity = TrackBar1.Value / 100;
}

    ",90,6450,58,2008-07-31T21:42:52,2022-04-12 09:48:45Z,c 
How to convert a Decimal to a Double in C#?,"You have two problems.
Firstly, Opacity requires a double, not a decimal value.  The compiler is telling you that while there is a conversion between decimal and double, it is an explicit conversion that you need to specify in order for it to work.
Secondly, TrackBar.Value is an integer value and dividing an int by an int results in an int no matter what type of variable you assign it to. In this case there is an implicit cast from int to decimal or double, because there is no loss of precision when you do the cast. So the compiler doesn't complain. But the value you get is always 0, presumably, since trackBar.Value is always less than 5000.
The solution is to change your code to use double (the native type for Opacity) and do floating point arithmetic by explicitly making the constant a double, which will have the effect of promoting the arithmetic or casting trackBar.Value to double, which will do the same thing or both. You don't need the intermediate variable unless it is used elsewhere. My guess is the compiler would optimize it away anyway.
trackBar.Opacity = (double)trackBar.Value / 5000.0;

    ",71,6450,58,2008-07-31T21:42:52,2022-04-12 09:48:45Z,c 
How to convert a Decimal to a Double in C#?,"In my opinion, it is desirable to be as explicit as possible. This adds clarity to the code and aids your fellow programmers who may eventually read it.

In addition to (or instead of) appending a .0 to the number, you can use decimal.ToDouble().  

Here are some examples:

// Example 1
double transperancy = trackBar1.Value/5000;
this.Opacity = decimal.ToDouble(transperancy);

// Example 2 - with inline temp
this.Opacity = decimal.ToDouble(trackBar1.Value/5000);

    ",67,6450,58,2008-07-31T21:42:52,2022-04-12 09:48:45Z,c 
How to convert a Decimal to a Double in C#?,"Assuming you are using WinForms, Form.Opacity is of type double, so you should use:

double trans = trackBar1.Value / 5000.0;
this.Opacity = trans;


Unless you need the value elsewhere, it's simpler to write:

this.Opacity = trackBar1.Value / 5000.0;


The reason the control doesn't work when you changed your code to simply be a double was because you had:

double trans = trackbar1.Value / 5000;


which interpreted the 5000 as an integer, and because trackbar1.Value is also an integer your trans value was always zero. By explicitly making the numeric a floating point value by adding the .0 the compiler can now interpret it as a double and perform the proper calculation.
    ",55,6450,58,2008-07-31T21:42:52,2022-04-12 09:48:45Z,c 
How to convert a Decimal to a Double in C#?,"The Opacity property is of double type:

double trans = trackBar1.Value / 5000.0;
this.Opacity = trans;


or simply:

this.Opacity = trackBar1.Value / 5000.0;


or:

this.Opacity = trackBar1.Value / 5000d;


Notice that I am using 5000.0 (or 5000d) to force a double division because trackBar1.Value is an integer and it would perform an integer division and the result would be an integer.
    ",58,6450,58,2008-07-31T21:42:52,2022-04-12 09:48:45Z,c 
How to convert a Decimal to a Double in C#?,"It sounds like this.Opacity is a double value, and the compiler doesn't like you trying to cram a decimal value into it.
    ",65,6450,58,2008-07-31T21:42:52,2022-04-12 09:48:45Z,c 
How to convert a Decimal to a Double in C#?,"Since Opacity is a double value, I would just use a double from the outset and not cast at all, but be sure to use a double when dividing so you don't loose any precision

Opacity = trackBar1.Value / 5000.0;

    ",49,6450,58,2008-07-31T21:42:52,2022-04-12 09:48:45Z,c 
How to convert a Decimal to a Double in C#?,"You should use 5000.0 instead of 5000.
    ",57,6450,58,2008-07-31T21:42:52,2022-04-12 09:48:45Z,c 
How to convert a Decimal to a Double in C#?,"The best solution is:

this.Opacity = decimal.ToDouble(trackBar1.Value/5000);

    ",48,6450,58,2008-07-31T21:42:52,2022-04-12 09:48:45Z,c 
How to convert a Decimal to a Double in C#?,"Try this -
// decimal values
decimal d1 = 3234.3434m;

// convert to double
double r1 = Decimal.ToDouble(d1);

    ",0,6450,58,2008-07-31T21:42:52,2022-04-12 09:48:45Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"
                
Given a DateTime representing a person's birthday, How do I calculate their age in years?
    ",2111,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"An easy to understand and simple solution.
// Save today's date.
var today = DateTime.Today;

// Calculate the age.
var age = today.Year - birthdate.Year;

// Go back to the year in which the person was born in case of a leap year
if (birthdate.Date > today.AddYears(-age)) age--;

However, this assumes you are looking for the western idea of the age and not using East Asian reckoning.
    ",2323,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"This is a strange way to do it, but if you format the date to yyyymmdd and subtract the date of birth from the current date then drop the last 4 digits you've got the age :)

I don't know C#, but I believe this will work in any language.

20080814 - 19800703 = 280111 


Drop the last 4 digits = 28.

C# Code:

int now = int.Parse(DateTime.Now.ToString(""yyyyMMdd""));
int dob = int.Parse(dateOfBirth.ToString(""yyyyMMdd""));
int age = (now - dob) / 10000;


Or alternatively without all the type conversion in the form of an extension method. Error checking omitted:

public static Int32 GetAge(this DateTime dateOfBirth)
{
    var today = DateTime.Today;

    var a = (today.Year * 100 + today.Month) * 100 + today.Day;
    var b = (dateOfBirth.Year * 100 + dateOfBirth.Month) * 100 + dateOfBirth.Day;

    return (a - b) / 10000;
}

    ",1078,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"2 Main problems to solve are:

1. Calculate Exact age - in years, months, days, etc.

2. Calculate Generally perceived age - people usually do not care how old they exactly are, they just care when their birthday in the current year is.



Solution for 1 is obvious:

DateTime birth = DateTime.Parse(""1.1.2000"");
DateTime today = DateTime.Today;     //we usually don't care about birth time
TimeSpan age = today - birth;        //.NET FCL should guarantee this as precise
double ageInDays = age.TotalDays;    //total number of days ... also precise
double daysInYear = 365.2425;        //statistical value for 400 years
double ageInYears = ageInDays / daysInYear;  //can be shifted ... not so precise




Solution for 2 is the one which is not so precise in determing total age, but is perceived as precise by people. People also usually use it, when they calculate their age ""manually"":

DateTime birth = DateTime.Parse(""1.1.2000"");
DateTime today = DateTime.Today;
int age = today.Year - birth.Year;    //people perceive their age in years

if (today.Month < birth.Month ||
   ((today.Month == birth.Month) && (today.Day < birth.Day)))
{
  age--;  //birthday in current year not yet reached, we are 1 year younger ;)
          //+ no birthday for 29.2. guys ... sorry, just wrong date for birth
}


Notes to 2.:


This is my preferred solution
We cannot use DateTime.DayOfYear or TimeSpans, as they shift number of days in leap years
I have put there little more lines for readability


Just one more note ... I would create 2 static overloaded methods for it, one for universal usage, second for usage-friendliness:

public static int GetAge(DateTime bithDay, DateTime today) 
{ 
  //chosen solution method body
}

public static int GetAge(DateTime birthDay) 
{ 
  return GetAge(birthDay, DateTime.Now);
}

    ",61,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"Here is a test snippet:

DateTime bDay = new DateTime(2000, 2, 29);
DateTime now = new DateTime(2009, 2, 28);
MessageBox.Show(string.Format(""Test {0} {1} {2}"",
                CalculateAgeWrong1(bDay, now),      // outputs 9
                CalculateAgeWrong2(bDay, now),      // outputs 9
                CalculateAgeCorrect(bDay, now),     // outputs 8
                CalculateAgeCorrect2(bDay, now)));  // outputs 8


Here you have the methods:

public int CalculateAgeWrong1(DateTime birthDate, DateTime now)
{
    return new DateTime(now.Subtract(birthDate).Ticks).Year - 1;
}

public int CalculateAgeWrong2(DateTime birthDate, DateTime now)
{
    int age = now.Year - birthDate.Year;

    if (now < birthDate.AddYears(age))
        age--;

    return age;
}

public int CalculateAgeCorrect(DateTime birthDate, DateTime now)
{
    int age = now.Year - birthDate.Year;

    if (now.Month < birthDate.Month || (now.Month == birthDate.Month && now.Day < birthDate.Day))
        age--;

    return age;
}

public int CalculateAgeCorrect2(DateTime birthDate, DateTime now)
{
    int age = now.Year - birthDate.Year;

    // For leap years we need this
    if (birthDate > now.AddYears(-age)) 
        age--;
    // Don't use:
    // if (birthDate.AddYears(age) > now) 
    //     age--;

    return age;
}

    ",408,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"The simple answer to this is to apply AddYears as shown below because this is the only native method to add years to the 29th of Feb. of leap years and obtain the correct result of the 28th of Feb. for common years. 

Some feel that 1th of Mar. is the birthday of leaplings but neither .Net nor any official rule supports this, nor does common logic explain why some born in February should have 75% of their birthdays in another month.

Further, an Age method lends itself to be added as an extension to DateTime. By this you can obtain the age in the simplest possible way:


List item


int age = birthDate.Age();

public static class DateTimeExtensions
{
    /// <summary>
    /// Calculates the age in years of the current System.DateTime object today.
    /// </summary>
    /// <param name=""birthDate"">The date of birth</param>
    /// <returns>Age in years today. 0 is returned for a future date of birth.</returns>
    public static int Age(this DateTime birthDate)
    {
        return Age(birthDate, DateTime.Today);
    }

    /// <summary>
    /// Calculates the age in years of the current System.DateTime object on a later date.
    /// </summary>
    /// <param name=""birthDate"">The date of birth</param>
    /// <param name=""laterDate"">The date on which to calculate the age.</param>
    /// <returns>Age in years on a later day. 0 is returned as minimum.</returns>
    public static int Age(this DateTime birthDate, DateTime laterDate)
    {
        int age;
        age = laterDate.Year - birthDate.Year;

        if (age > 0)
        {
            age -= Convert.ToInt32(laterDate.Date < birthDate.Date.AddYears(age));
        }
        else
        {
            age = 0;
        }

        return age;
    }
}


Now, run this test:

class Program
{
    static void Main(string[] args)
    {
        RunTest();
    }

    private static void RunTest()
    {
        DateTime birthDate = new DateTime(2000, 2, 28);
        DateTime laterDate = new DateTime(2011, 2, 27);
        string iso = ""yyyy-MM-dd"";

        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                Console.WriteLine(""Birth date: "" + birthDate.AddDays(i).ToString(iso) + ""  Later date: "" + laterDate.AddDays(j).ToString(iso) + ""  Age: "" + birthDate.AddDays(i).Age(laterDate.AddDays(j)).ToString());
            }
        }

        Console.ReadKey();
    }
}


The critical date example is this:

Birth date: 2000-02-29  Later date: 2011-02-28  Age: 11

Output:

{
    Birth date: 2000-02-28  Later date: 2011-02-27  Age: 10
    Birth date: 2000-02-28  Later date: 2011-02-28  Age: 11
    Birth date: 2000-02-28  Later date: 2011-03-01  Age: 11
    Birth date: 2000-02-29  Later date: 2011-02-27  Age: 10
    Birth date: 2000-02-29  Later date: 2011-02-28  Age: 11
    Birth date: 2000-02-29  Later date: 2011-03-01  Age: 11
    Birth date: 2000-03-01  Later date: 2011-02-27  Age: 10
    Birth date: 2000-03-01  Later date: 2011-02-28  Age: 10
    Birth date: 2000-03-01  Later date: 2011-03-01  Age: 11
}


And for the later date 2012-02-28:

{
    Birth date: 2000-02-28  Later date: 2012-02-28  Age: 12
    Birth date: 2000-02-28  Later date: 2012-02-29  Age: 12
    Birth date: 2000-02-28  Later date: 2012-03-01  Age: 12
    Birth date: 2000-02-29  Later date: 2012-02-28  Age: 11
    Birth date: 2000-02-29  Later date: 2012-02-29  Age: 12
    Birth date: 2000-02-29  Later date: 2012-03-01  Age: 12
    Birth date: 2000-03-01  Later date: 2012-02-28  Age: 11
    Birth date: 2000-03-01  Later date: 2012-02-29  Age: 11
    Birth date: 2000-03-01  Later date: 2012-03-01  Age: 12
}

    ",122,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"Here is a function that is serving me well. No calculations , very simple.
    public static string ToAge(this DateTime dob, DateTime? toDate = null)
    {
        if (!toDate.HasValue)
            toDate = DateTime.Now;
        var now = toDate.Value;

        if (now.CompareTo(dob) < 0)
            return ""Future date"";

        int years = now.Year - dob.Year;
        int months = now.Month - dob.Month;
        int days = now.Day - dob.Day;

        if (days < 0)
        {
            months--;
            days = DateTime.DaysInMonth(dob.Year, dob.Month) - dob.Day + now.Day;
        }

        if (months < 0)
        {
            years--;
            months = 12 + months;
        }


        return string.Format(""{0} year(s), {1} month(s), {2} days(s)"",
            years,
            months,
            days);
    }

And here is a unit test:
    [Test]
    public void ToAgeTests()
    {
        var date = new DateTime(2000, 1, 1);
        Assert.AreEqual(""0 year(s), 0 month(s), 1 days(s)"", new DateTime(1999, 12, 31).ToAge(date));
        Assert.AreEqual(""0 year(s), 0 month(s), 0 days(s)"", new DateTime(2000, 1, 1).ToAge(date));
        Assert.AreEqual(""1 year(s), 0 month(s), 0 days(s)"", new DateTime(1999, 1, 1).ToAge(date));
        Assert.AreEqual(""0 year(s), 11 month(s), 0 days(s)"", new DateTime(1999, 2, 1).ToAge(date));
        Assert.AreEqual(""0 year(s), 10 month(s), 25 days(s)"", new DateTime(1999, 2, 4).ToAge(date));
        Assert.AreEqual(""0 year(s), 10 month(s), 1 days(s)"", new DateTime(1999, 2, 28).ToAge(date));

        date = new DateTime(2000, 2, 15);
        Assert.AreEqual(""0 year(s), 0 month(s), 28 days(s)"", new DateTime(2000, 1, 18).ToAge(date));
    }

    ",3,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"Another function, not by me but found on the web and refined it a bit:

public static int GetAge(DateTime birthDate)
{
    DateTime n = DateTime.Now; // To avoid a race condition around midnight
    int age = n.Year - birthDate.Year;

    if (n.Month < birthDate.Month || (n.Month == birthDate.Month && n.Day < birthDate.Day))
        age--;

    return age;
}


Just two things that come into my mind: What about people from countries that do not use the Gregorian calendar? DateTime.Now is in the server-specific culture I think. I have absolutely zero knowledge about actually working with Asian calendars and I do not know if there is an easy way to convert dates between calendars, but just in case you're wondering about those Chinese guys from the year 4660 :-)
    ",89,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"Simple and readable with complementary method
public static int getAge(DateTime birthDate)
{
    var today = DateTime.Today;
    var age = today.Year - birthDate.Year;
    var monthDiff = today.Month - birthDate.Month;
    var dayDiff = today.Day - birthDate.Day;

    if (dayDiff < 0)
    {
        monthDiff--;
    }
    if (monthDiff < 0)
    {
       age--;
    }
    return age;
}

    ",1,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"This gives ""more detail"" to this question. Maybe this is what you're looking for

DateTime birth = new DateTime(1974, 8, 29);
DateTime today = DateTime.Now;
TimeSpan span = today - birth;
DateTime age = DateTime.MinValue + span;

// Make adjustment due to MinValue equalling 1/1/1
int years = age.Year - 1;
int months = age.Month - 1;
int days = age.Day - 1;

// Print out not only how many years old they are but give months and days as well
Console.Write(""{0} years, {1} months, {2} days"", years, months, days);

    ",36,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"My suggestion

int age = (int) ((DateTime.Now - bday).TotalDays/365.242199);


That seems to have the year changing on the right date. (I spot tested up to age 107.)
    ",95,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"private int GetAge(int _year, int _month, int _day
{
    DateTime yourBirthDate= new DateTime(_year, _month, _day);

    DateTime todaysDateTime = DateTime.Today;
    int noOfYears = todaysDateTime.Year - yourBirthDate.Year;

    if (DateTime.Now.Month < yourBirthDate.Month ||
        (DateTime.Now.Month == yourBirthDate.Month && DateTime.Now.Day < yourBirthDate.Day))
    {
        noOfYears--;
    }

    return  noOfYears;
}

    ",13,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"This is the version we use here. It works, and it's fairly simple. It's the same idea as Jeff's but I think it's a little clearer because it separates out the logic for subtracting one, so it's a little easier to understand.

public static int GetAge(this DateTime dateOfBirth, DateTime dateAsAt)
{
    return dateAsAt.Year - dateOfBirth.Year - (dateOfBirth.DayOfYear < dateAsAt.DayOfYear ? 0 : 1);
}


You could expand the ternary operator to make it even clearer, if you think that sort of thing is unclear.

Obviously this is done as an extension method on DateTime, but clearly you can grab that one line of code that does the work and put it anywhere. Here we have another overload of the Extension method that passes in DateTime.Now, just for completeness.
    ",45,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"Here's yet another answer:
public static int AgeInYears(DateTime birthday, DateTime today)
{
    return ((today.Year - birthday.Year) * 372 + (today.Month - birthday.Month) * 31 + (today.Day - birthday.Day)) / 372;
}

This has been extensively unit-tested. It does look a bit ""magic"". The number 372 is the number of days there would be in a year if every month had 31 days.
The explanation of why it works (lifted from here) is:

Let's set Yn = DateTime.Now.Year, Yb = birthday.Year, Mn = DateTime.Now.Month, Mb = birthday.Month, Dn = DateTime.Now.Day, Db = birthday.Day
age = Yn - Yb + (31*(Mn - Mb) + (Dn - Db)) / 372
We know that what we need is either Yn-Yb if the date has already been reached, Yn-Yb-1 if it has not.
a) If Mn<Mb, we have -341 <= 31*(Mn-Mb) <= -31 and -30 <= Dn-Db <= 30
-371 <= 31*(Mn - Mb) + (Dn - Db) <= -1
With integer division
(31*(Mn - Mb) + (Dn - Db)) / 372 = -1
b) If Mn=Mb and Dn<Db, we have 31*(Mn - Mb) = 0 and -30 <= Dn-Db <= -1
With integer division, again
(31*(Mn - Mb) + (Dn - Db)) / 372 = -1
c) If Mn>Mb, we have 31 <= 31*(Mn-Mb) <= 341 and -30 <= Dn-Db <= 30
1 <= 31*(Mn - Mb) + (Dn - Db) <= 371
With integer division
(31*(Mn - Mb) + (Dn - Db)) / 372 = 0
d) If Mn=Mb and Dn>Db, we have 31*(Mn - Mb) = 0 and 1 <= Dn-Db <= 30
With integer division, again
(31*(Mn - Mb) + (Dn - Db)) / 372 = 0
e) If Mn=Mb and Dn=Db, we have 31*(Mn - Mb) + Dn-Db = 0
and therefore (31*(Mn - Mb) + (Dn - Db)) / 372 = 0

    ",30,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"I would strongly recommend using a NuGet package called AgeCalculator since there are many things to consider when calculating age (leap years, time component etc) and only two lines of code does not cut it. The library gives you more then just a year. It even takes into consideration the time component at the calculation so you get an accurate age with years, months, days and time components. It is more advanced giving an option to consider Feb 29 in a leap year as Feb 28 in a non-leap year.
    ",1,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"I use this:

public static class DateTimeExtensions
{
    public static int Age(this DateTime birthDate)
    {
        return Age(birthDate, DateTime.Now);
    }

    public static int Age(this DateTime birthDate, DateTime offsetDate)
    {
        int result=0;
        result = offsetDate.Year - birthDate.Year;

        if (offsetDate.DayOfYear < birthDate.DayOfYear)
        {
              result--;
        }

        return result;
    }
}

    ",36,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"The simplest way I've ever found is this. It works correctly for the US and western europe locales. Can't speak to other locales, especially places like China. 4 extra compares, at most, following the initial computation of age.

public int AgeInYears(DateTime birthDate, DateTime referenceDate)
{
  Debug.Assert(referenceDate >= birthDate, 
               ""birth date must be on or prior to the reference date"");

  DateTime birth = birthDate.Date;
  DateTime reference = referenceDate.Date;
  int years = (reference.Year - birth.Year);

  //
  // an offset of -1 is applied if the birth date has 
  // not yet occurred in the current year.
  //
  if (reference.Month > birth.Month);
  else if (reference.Month < birth.Month) 
    --years;
  else // in birth month
  {
    if (reference.Day < birth.Day)
      --years;
  }

  return years ;
}


I was looking over the answers to this and noticed that nobody has made reference to regulatory/legal implications of leap day births. For instance, per Wikipedia, if you're born on February 29th in various jurisdictions, you're non-leap year birthday varies:


In the United Kingdom and Hong Kong: it's the ordinal day of the year, so the next day, March 1st is your birthday.
In New Zealand: it's the previous day, February 28th for the purposes of driver licencing, and March 1st for other purposes.
Taiwan: it's February 28th.


And as near as I can tell, in the US, the statutes are silent on the matter, leaving it up to the common law and to how various regulatory bodies define things in their regulations.

To that end, an improvement:

public enum LeapDayRule
{
  OrdinalDay     = 1 ,
  LastDayOfMonth = 2 ,
}

static int ComputeAgeInYears(DateTime birth, DateTime reference, LeapYearBirthdayRule ruleInEffect)
{
  bool isLeapYearBirthday = CultureInfo.CurrentCulture.Calendar.IsLeapDay(birth.Year, birth.Month, birth.Day);
  DateTime cutoff;

  if (isLeapYearBirthday && !DateTime.IsLeapYear(reference.Year))
  {
    switch (ruleInEffect)
    {
      case LeapDayRule.OrdinalDay:
        cutoff = new DateTime(reference.Year, 1, 1)
                             .AddDays(birth.DayOfYear - 1);
        break;

      case LeapDayRule.LastDayOfMonth:
        cutoff = new DateTime(reference.Year, birth.Month, 1)
                             .AddMonths(1)
                             .AddDays(-1);
        break;

      default:
        throw new InvalidOperationException();
    }
  }
  else
  {
    cutoff = new DateTime(reference.Year, birth.Month, birth.Day);
  }

  int age = (reference.Year - birth.Year) + (reference >= cutoff ? 0 : -1);
  return age < 0 ? 0 : age;
}


It should be noted that this code assumes:


A western (European) reckoning of age, and
A calendar, like the Gregorian calendar that inserts a single leap day at the end of a month.

    ",21,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"SQL version:

declare @dd smalldatetime = '1980-04-01'
declare @age int = YEAR(GETDATE())-YEAR(@dd)
if (@dd> DATEADD(YYYY, -@age, GETDATE())) set @age = @age -1

print @age  

    ",10,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"Keeping it simple (and possibly stupid:)).

DateTime birth = new DateTime(1975, 09, 27, 01, 00, 00, 00);
TimeSpan ts = DateTime.Now - birth;
Console.WriteLine(""You are approximately "" + ts.TotalSeconds.ToString() + "" seconds old."");

    ",21,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"This may work:

public override bool IsValid(DateTime value)
{
    _dateOfBirth =  value;
    var yearsOld = (double) (DateTime.Now.Subtract(_dateOfBirth).TotalDays/365);
    if (yearsOld > 18)
        return true;
    return false;
}

    ",5,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"Here's a little code sample for C# I knocked up, be careful around the edge cases specifically leap years, not all the above solutions take them into account. Pushing the answer out as a DateTime can cause problems as you could end up trying to put too many days into a specific month e.g. 30 days in Feb.

public string LoopAge(DateTime myDOB, DateTime FutureDate)
{
    int years = 0;
    int months = 0;
    int days = 0;

    DateTime tmpMyDOB = new DateTime(myDOB.Year, myDOB.Month, 1);

    DateTime tmpFutureDate = new DateTime(FutureDate.Year, FutureDate.Month, 1);

    while (tmpMyDOB.AddYears(years).AddMonths(months) < tmpFutureDate)
    {
        months++;
        if (months > 12)
        {
            years++;
            months = months - 12;
        }
    }

    if (FutureDate.Day >= myDOB.Day)
    {
        days = days + FutureDate.Day - myDOB.Day;
    }
    else
    {
        months--;
        if (months < 0)
        {
            years--;
            months = months + 12;
        }
        days = days + (DateTime.DaysInMonth(FutureDate.AddMonths(-1).Year, FutureDate.AddMonths(-1).Month) + FutureDate.Day) - myDOB.Day;

    }

    //add an extra day if the dob is a leap day
    if (DateTime.IsLeapYear(myDOB.Year) && myDOB.Month == 2 && myDOB.Day == 29)
    {
        //but only if the future date is less than 1st March
        if(FutureDate >= new DateTime(FutureDate.Year, 3,1))
            days++;
    }

    return ""Years: "" + years + "" Months: "" + months + "" Days: "" + days;
}

    ",4,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"This is simple and appears to be accurate for my needs. I am making an assumption for the purpose of leap years that regardless of when the person chooses to celebrate the birthday they are not technically a year older until 365 days have passed since their last birthday (i.e 28th February does not make them a year older).
DateTime now = DateTime.Today;
DateTime birthday = new DateTime(1991, 02, 03);//3rd feb

int age = now.Year - birthday.Year;

if (now.Month < birthday.Month || (now.Month == birthday.Month && now.Day < birthday.Day))//not had bday this year yet
  age--;

return age;

    ",8,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"This is not a direct answer, but more of a philosophical reasoning about the problem at hand from a quasi-scientific point of view.

I would argue that the question does not specify the unit nor culture in which to measure age, most answers seem to assume an integer annual representation. The SI-unit for time is second, ergo the correct generic answer should be (of course assuming normalized DateTime and taking no regard whatsoever to relativistic effects):

var lifeInSeconds = (DateTime.Now.Ticks - then.Ticks)/TickFactor;


In the Christian way of calculating age in years:

var then = ... // Then, in this case the birthday
var now = DateTime.UtcNow;
int age = now.Year - then.Year;
if (now.AddYears(-age) < then) age--;


In finance there is a similar problem when calculating something often referred to as the Day Count Fraction, which roughly is a number of years for a given period. And the age issue is really a time measuring issue.

Example for the actual/actual (counting all days ""correctly"") convention:

DateTime start, end = .... // Whatever, assume start is before end

double startYearContribution = 1 - (double) start.DayOfYear / (double) (DateTime.IsLeapYear(start.Year) ? 366 : 365);
double endYearContribution = (double)end.DayOfYear / (double)(DateTime.IsLeapYear(end.Year) ? 366 : 365);
double middleContribution = (double) (end.Year - start.Year - 1);

double DCF = startYearContribution + endYearContribution + middleContribution;


Another quite common way to measure time generally is by ""serializing"" (the dude who named this date convention must seriously have been trippin'):

DateTime start, end = .... // Whatever, assume start is before end
int days = (end - start).Days;


I wonder how long we have to go before a relativistic age in seconds becomes more useful than the rough approximation of earth-around-sun-cycles during one's lifetime so far :) Or in other words, when a period must be given a location or a function representing motion for itself to be valid :)
    ",20,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"private int GetYearDiff(DateTime start, DateTime end)
{
    int diff = end.Year - start.Year;
    if (end.DayOfYear < start.DayOfYear) { diff -= 1; }
    return diff;
}
[Fact]
public void GetYearDiff_WhenCalls_ShouldReturnCorrectYearDiff()
{
    //arrange
    var now = DateTime.Now;
    //act
    //assert
    Assert.Equal(24, GetYearDiff(new DateTime(1992, 7, 9), now)); // passed
    Assert.Equal(24, GetYearDiff(new DateTime(1992, now.Month, now.Day), now)); // passed
    Assert.Equal(23, GetYearDiff(new DateTime(1992, 12, 9), now)); // passed
}

    ",7,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"To calculate the age with nearest age:

var ts = DateTime.Now - new DateTime(1988, 3, 19);
var age = Math.Round(ts.Days / 365.0);

    ",-2,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"TimeSpan diff = DateTime.Now - birthdayDateTime;
string age = String.Format(""{0:%y} years, {0:%M} months, {0:%d}, days old"", diff);


I'm not sure how exactly you'd like it returned to you, so I just made a readable string.
    ",19,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"Do we need to consider people who is smaller than 1 year? as Chinese culture, we describe small babies' age as 2 months or 4 weeks. 

Below is my implementation, it is not as simple as what I imagined, especially to deal with date like 2/28. 

public static string HowOld(DateTime birthday, DateTime now)
{
    if (now < birthday)
        throw new ArgumentOutOfRangeException(""birthday must be less than now."");

    TimeSpan diff = now - birthday;
    int diffDays = (int)diff.TotalDays;

    if (diffDays > 7)//year, month and week
    {
        int age = now.Year - birthday.Year;

        if (birthday > now.AddYears(-age))
            age--;

        if (age > 0)
        {
            return age + (age > 1 ? "" years"" : "" year"");
        }
        else
        {// month and week
            DateTime d = birthday;
            int diffMonth = 1;

            while (d.AddMonths(diffMonth) <= now)
            {
                diffMonth++;
            }

            age = diffMonth-1;

            if (age == 1 && d.Day > now.Day)
                age--;

            if (age > 0)
            {
                return age + (age > 1 ? "" months"" : "" month"");
            }
            else
            {
                age = diffDays / 7;
                return age + (age > 1 ? "" weeks"" : "" week"");
            }
        }
    }
    else if (diffDays > 0)
    {
        int age = diffDays;
        return age + (age > 1 ? "" days"" : "" day"");
    }
    else
    {
        int age = diffDays;
        return ""just born"";
    }
}


This implementation has passed below test cases.

[TestMethod]
public void TestAge()
{
    string age = HowOld(new DateTime(2011, 1, 1), new DateTime(2012, 11, 30));
    Assert.AreEqual(""1 year"", age);

    age = HowOld(new DateTime(2011, 11, 30), new DateTime(2012, 11, 30));
    Assert.AreEqual(""1 year"", age);

    age = HowOld(new DateTime(2001, 1, 1), new DateTime(2012, 11, 30));
    Assert.AreEqual(""11 years"", age);

    age = HowOld(new DateTime(2012, 1, 1), new DateTime(2012, 11, 30));
    Assert.AreEqual(""10 months"", age);

    age = HowOld(new DateTime(2011, 12, 1), new DateTime(2012, 11, 30));
    Assert.AreEqual(""11 months"", age);

    age = HowOld(new DateTime(2012, 10, 1), new DateTime(2012, 11, 30));
    Assert.AreEqual(""1 month"", age);

    age = HowOld(new DateTime(2008, 2, 28), new DateTime(2009, 2, 28));
    Assert.AreEqual(""1 year"", age);

    age = HowOld(new DateTime(2008, 3, 28), new DateTime(2009, 2, 28));
    Assert.AreEqual(""11 months"", age);

    age = HowOld(new DateTime(2008, 3, 28), new DateTime(2009, 3, 28));
    Assert.AreEqual(""1 year"", age);

    age = HowOld(new DateTime(2009, 1, 28), new DateTime(2009, 2, 28));
    Assert.AreEqual(""1 month"", age);

    age = HowOld(new DateTime(2009, 2, 1), new DateTime(2009, 3, 1));
    Assert.AreEqual(""1 month"", age);

    // NOTE.
    // new DateTime(2008, 1, 31).AddMonths(1) == new DateTime(2009, 2, 28);
    // new DateTime(2008, 1, 28).AddMonths(1) == new DateTime(2009, 2, 28);
    age = HowOld(new DateTime(2009, 1, 31), new DateTime(2009, 2, 28));
    Assert.AreEqual(""4 weeks"", age);

    age = HowOld(new DateTime(2009, 2, 1), new DateTime(2009, 2, 28));
    Assert.AreEqual(""3 weeks"", age);

    age = HowOld(new DateTime(2009, 2, 1), new DateTime(2009, 3, 1));
    Assert.AreEqual(""1 month"", age);

    age = HowOld(new DateTime(2012, 11, 5), new DateTime(2012, 11, 30));
    Assert.AreEqual(""3 weeks"", age);

    age = HowOld(new DateTime(2012, 11, 1), new DateTime(2012, 11, 30));
    Assert.AreEqual(""4 weeks"", age);

    age = HowOld(new DateTime(2012, 11, 20), new DateTime(2012, 11, 30));
    Assert.AreEqual(""1 week"", age);

    age = HowOld(new DateTime(2012, 11, 25), new DateTime(2012, 11, 30));
    Assert.AreEqual(""5 days"", age);

    age = HowOld(new DateTime(2012, 11, 29), new DateTime(2012, 11, 30));
    Assert.AreEqual(""1 day"", age);

    age = HowOld(new DateTime(2012, 11, 30), new DateTime(2012, 11, 30));
    Assert.AreEqual(""just born"", age);

    age = HowOld(new DateTime(2000, 2, 29), new DateTime(2009, 2, 28));
    Assert.AreEqual(""8 years"", age);

    age = HowOld(new DateTime(2000, 2, 29), new DateTime(2009, 3, 1));
    Assert.AreEqual(""9 years"", age);

    Exception e = null;

    try
    {
        age = HowOld(new DateTime(2012, 12, 1), new DateTime(2012, 11, 30));
    }
    catch (ArgumentOutOfRangeException ex)
    {
        e = ex;
    }

    Assert.IsTrue(e != null);
}


Hope it's helpful.
    ",21,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"Check this out:

TimeSpan ts = DateTime.Now.Subtract(Birthdate);
age = (byte)(ts.TotalDays / 365.25);

    ",-1,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"This classic question is deserving of a Noda Time solution.

static int GetAge(LocalDate dateOfBirth)
{
    Instant now = SystemClock.Instance.Now;

    // The target time zone is important.
    // It should align with the *current physical location* of the person
    // you are talking about.  When the whereabouts of that person are unknown,
    // then you use the time zone of the person who is *asking* for the age.
    // The time zone of birth is irrelevant!

    DateTimeZone zone = DateTimeZoneProviders.Tzdb[""America/New_York""];

    LocalDate today = now.InZone(zone).Date;

    Period period = Period.Between(dateOfBirth, today, PeriodUnits.Years);

    return (int) period.Years;
}


Usage:

LocalDate dateOfBirth = new LocalDate(1976, 8, 27);
int age = GetAge(dateOfBirth);


You might also be interested in the following improvements:


Passing in the clock as an IClock, instead of using SystemClock.Instance, would improve testability.
The target time zone will likely change, so you'd want a DateTimeZone parameter as well.


See also my blog post on this subject: Handling Birthdays, and Other Anniversaries
    ",10,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"=== Common Saying (from months to years old) ===

If you just for common use, here is the code as your information:

DateTime today = DateTime.Today;
DateTime bday = DateTime.Parse(""2016-2-14"");
int age = today.Year - bday.Year;
var unit = """";

if (bday > today.AddYears(-age))
{
    age--;
}
if (age == 0)   // Under one year old
{
    age = today.Month - bday.Month;

    age = age <= 0 ? (12 + age) : age;  // The next year before birthday

    age = today.Day - bday.Day >= 0 ? age : --age;  // Before the birthday.day

    unit = ""month"";
}
else {
    unit = ""year"";
}

if (age > 1)
{
    unit = unit + ""s"";
}


The test result as below:

The birthday: 2016-2-14

2016-2-15 =>  age=0, unit=month;
2016-5-13 =>  age=2, unit=months;
2016-5-14 =>  age=3, unit=months; 
2016-6-13 =>  age=3, unit=months; 
2016-6-15 =>  age=4, unit=months; 
2017-1-13 =>  age=10, unit=months; 
2017-1-14 =>  age=11, unit=months; 
2017-2-13 =>  age=11, unit=months; 
2017-2-14 =>  age=1, unit=year; 
2017-2-15 =>  age=1, unit=year; 
2017-3-13 =>  age=1, unit=year;
2018-1-13 =>  age=1, unit=year; 
2018-1-14 =>  age=1, unit=year; 
2018-2-13 =>  age=1, unit=year; 
2018-2-14 =>  age=2, unit=years; 

    ",7,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
How do I calculate someone's age based on a DateTime type birthday?,"I have a customized method to calculate age, plus a bonus validation message just in case it helps:

public void GetAge(DateTime dob, DateTime now, out int years, out int months, out int days)
{
    years = 0;
    months = 0;
    days = 0;

    DateTime tmpdob = new DateTime(dob.Year, dob.Month, 1);
    DateTime tmpnow = new DateTime(now.Year, now.Month, 1);

    while (tmpdob.AddYears(years).AddMonths(months) < tmpnow)
    {
        months++;
        if (months > 12)
        {
            years++;
            months = months - 12;
        }
    }

    if (now.Day >= dob.Day)
        days = days + now.Day - dob.Day;
    else
    {
        months--;
        if (months < 0)
        {
            years--;
            months = months + 12;
        }
        days += DateTime.DaysInMonth(now.AddMonths(-1).Year, now.AddMonths(-1).Month) + now.Day - dob.Day;
    }

    if (DateTime.IsLeapYear(dob.Year) && dob.Month == 2 && dob.Day == 29 && now >= new DateTime(now.Year, 3, 1))
        days++;

}   

private string ValidateDate(DateTime dob) //This method will validate the date
{
    int Years = 0; int Months = 0; int Days = 0;

    GetAge(dob, DateTime.Now, out Years, out Months, out Days);

    if (Years < 18)
        message =  Years + "" is too young. Please try again on your 18th birthday."";
    else if (Years >= 65)
        message = Years + "" is too old. Date of Birth must not be 65 or older."";
    else
        return null; //Denotes validation passed
}


Method call here and pass out datetime value (MM/dd/yyyy if server set to USA locale). Replace this with anything a messagebox or any container to display:

DateTime dob = DateTime.Parse(""03/10/1982"");  

string message = ValidateDate(dob);

lbldatemessage.Visible = !StringIsNullOrWhitespace(message);
lbldatemessage.Text = message ?? """"; //Ternary if message is null then default to empty string


Remember you can format the message any way you like.
    ",15,7355,487,2008-07-31T23:40:59,2022-03-25 01:14:33Z,c 
